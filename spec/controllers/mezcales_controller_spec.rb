require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MezcalesController, type: :controller, format: :json do

  describe "GET index" do
    let(:valid_token) { Rails.application.config_for(:api)['token'] }
    let(:invalid_token) { valid_token + 'invalid' }

    context "with valid token" do
      render_views

      it "assigns all mezcales as @mezcales" do
        mezcal = FactoryGirl.create :mezcal
        request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(valid_token)
        get :index, { format: :json }
        expect(JSON.parse(response.body).first).to have_key('precio_promedio')
      end
    end # context with valid token

    context "with invalid token" do
      it "returns a 401" do
        mezcal = FactoryGirl.create :mezcal
        request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(invalid_token)
        get :index, { format: :json }
        expect(response.response_code).to eq 401
      end
    end # context with invalid token
  end
end

RSpec.describe MezcalesController, :type => :controller do

  let(:tipo_maguey) { FactoryGirl.create :tipo_maguey }
  let(:marca) { FactoryGirl.create :marca }
  let(:zona_produccion) { FactoryGirl.create :zona_produccion }
  let(:valid_attributes) { FactoryGirl.attributes_for(:mezcal).merge({ tipo_maguey_id: tipo_maguey.id, marca_id: marca.id, zona_produccion_id: zona_produccion.id }) }

  let(:invalid_attributes) {
    { nombre: '' }
  }

  let(:usuario_logueado) { Usuario.new }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MezcalesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) { allow_any_instance_of(ApplicationController).to receive(:usuario_actual).and_return usuario_logueado }

  describe "GET index" do
    context "with html request" do
      it "assigns all mezcales as @mezcales" do
        mezcal = FactoryGirl.create :mezcal
        get :index, {}, valid_session
        expect(assigns(:mezcales)).to eq([mezcal])
      end
    end # context with html request
  end

  describe "GET show" do
    it "assigns the requested mezcal as @mezcal" do
      mezcal = FactoryGirl.create :mezcal
      get :show, {:id => mezcal.to_param}, valid_session
      expect(assigns(:mezcal)).to eq(mezcal)
    end
  end

  describe "GET new" do
    it "assigns a new mezcal as @mezcal" do
      get :new, {}, valid_session
      expect(assigns(:mezcal)).to be_a_new(Mezcal)
    end
  end

  describe "GET edit" do
    it "assigns the requested mezcal as @mezcal" do
      mezcal = FactoryGirl.create :mezcal
      get :edit, {:id => mezcal.to_param}, valid_session
      expect(assigns(:mezcal)).to eq(mezcal)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Mezcal" do
        expect {
          post :create, {:mezcal => valid_attributes}, valid_session
        }.to change(Mezcal, :count).by(1)
      end

      it "assigns a newly created mezcal as @mezcal" do
        post :create, {:mezcal => valid_attributes}, valid_session
        expect(assigns(:mezcal)).to be_a(Mezcal)
        expect(assigns(:mezcal)).to be_persisted
      end

      it "redirects to the created mezcal" do
        post :create, {:mezcal => valid_attributes}, valid_session
        expect(response).to redirect_to(Mezcal.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved mezcal as @mezcal" do
        post :create, {:mezcal => invalid_attributes}, valid_session
        expect(assigns(:mezcal)).to be_a_new(Mezcal)
      end

      it "re-renders the 'new' template" do
        post :create, {:mezcal => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested mezcal" do
        mezcal = FactoryGirl.create :mezcal
        put :update, {:id => mezcal.to_param, :mezcal => { nombre: 'Mezcal 2' }}, valid_session
        mezcal.reload
        expect(mezcal.nombre).to eq 'Mezcal 2'
      end

      it "assigns the requested mezcal as @mezcal" do
        mezcal = FactoryGirl.create :mezcal
        put :update, {:id => mezcal.to_param, :mezcal => valid_attributes}, valid_session
        expect(assigns(:mezcal)).to eq(mezcal)
      end

      it "redirects to the mezcal" do
        mezcal = FactoryGirl.create :mezcal
        put :update, {:id => mezcal.to_param, :mezcal => valid_attributes}, valid_session
        expect(response).to redirect_to(mezcal)
      end
    end

    describe "with invalid params" do
      it "assigns the mezcal as @mezcal" do
        mezcal = FactoryGirl.create :mezcal
        put :update, {:id => mezcal.to_param, :mezcal => invalid_attributes}, valid_session
        expect(assigns(:mezcal)).to eq(mezcal)
      end

      it "re-renders the 'edit' template" do
        mezcal = FactoryGirl.create :mezcal
        put :update, {:id => mezcal.to_param, :mezcal => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested mezcal" do
      mezcal = FactoryGirl.create :mezcal
      expect {
        delete :destroy, {:id => mezcal.to_param}, valid_session
      }.to change(Mezcal, :count).by(-1)
    end

    it "redirects to the mezcales list" do
      mezcal = FactoryGirl.create :mezcal
      delete :destroy, {:id => mezcal.to_param}, valid_session
      expect(response).to redirect_to(mezcales_url)
    end
  end

end
